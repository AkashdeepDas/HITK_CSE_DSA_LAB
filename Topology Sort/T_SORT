//Source: Aditya Pratap Saha

#include <stdio.h>
#include <stdlib.h>

struct node
{
    int vertex;
    struct node* next;
};
struct node *top=NULL;
struct node *push(struct node *top,int v)
{
    struct node *newNode,*ptr;
    newNode =(struct node *)malloc(sizeof(struct node));
    newNode->vertex = v;
    newNode->next = NULL;
    if(top==NULL)
    {
         top=newNode;
         newNode->next=NULL;
    }
    else
    {
      newNode->next=top;
      top=newNode;
    }
    return top;
}
struct node *createNode(int );
struct Graph
{
    int numVertices;
    int* visited;
    struct node** adjLists; // we need int** to store a two dimensional array. Similary, we need struct node** to store an array of Linked lists
};
struct Graph* createGraph(int);
void addEdge(struct Graph*, int, int);
void printGraph(struct Graph*);
void TSORT(struct Graph*, int);
void tsort(struct Graph*,int);
int main()
{
    struct Graph* graph = createGraph(6);
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);
    printGraph(graph);
    tsort(graph,6);
    display(top);
    return 0;
}
void tsort(struct Graph* graph, int v)
{
    int i;
    for(i=0;i<v;i++)
    if(graph->visited[i]==0)
        TSORT(graph,i);
}
void TSORT(struct Graph* graph, int vertex)
{
    int c=0;
    struct node* temp = graph->adjLists[vertex];
    graph->visited[vertex] = 1;

    while(temp)
        {
            int adjVertex = temp->vertex;
            if(graph->visited[adjVertex] == 0)
            {
                c++;
                TSORT(graph,adjVertex);
                top=push(top,vertex);
            }

            temp = temp->next;
       }
       if(c==0)
         top=push(top,vertex);
}

void display(struct node *top)
{
    struct node *ptr;
    ptr=top;
    if(ptr==NULL)
        printf("Stack is empty : ");
    else
    {
        while(ptr!=NULL)
        {
            printf("%d->",ptr->vertex);
            ptr=ptr->next;
        }
    }
    return top;
}

struct node* createNode(int v)
{
    struct node* newNode = malloc(sizeof(struct node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}
struct Graph* createGraph(int vertices)
{
    struct Graph* graph = malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    graph->adjLists = malloc(vertices * sizeof(struct node*));

    graph->visited = malloc(vertices * sizeof(int));

    int i;
    for (i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest)
{
    // Add edge from src to dest
    struct node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

void printGraph(struct Graph* graph)
{
    int v;
    for (v = 0; v < graph->numVertices; v++)
    {
        struct node* temp = graph->adjLists[v];
        printf("\n Adjacency list of vertex %d\n ", v);
        while (temp)
        {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
}

